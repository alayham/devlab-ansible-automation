---
- name: Include Redhat variables
  ansible.builtin.include_vars: Redhat.yml
  when: ansible_facts['os_family'] == "RedHat"

- name: Include Debian variables
  ansible.builtin.include_vars: Debian.yml
  when: ansible_facts['os_family'] == "Debian"

- name: Install bind packages
  ansible.builtin.package:
    name: '{{ item }}'
  loop: '{{ bind_package_names }}'

- name: Generate a new transaction signature key
  ansible.builtin.raw: tsig-keygen -a hmac-sha256 devlab | grep secret | awk '{print $2}' | sed -e s/\;// -e s/\"//g
  register: bind_tsig_key
  changed_when: true


- name: Try to sync all temporary updates to the zone files
  ansible.builtin.raw: rndc sync -clean
  changed_when: false
  failed_when: false

- name: Generate a new transaction signature key for rndc
  ansible.builtin.raw: tsig-keygen -a hmac-sha256 devlab | grep secret | awk '{print $2}' | sed -e s/\;// -e s/\"//g
  register: bind_rndc_key
  changed_when: true

- name: Save the rndc key
  ansible.builtin.copy:
    content: >
      key "rndc-key" {
        algorithm hmac-sha256;
        secret "{{ bind_rndc_key.stdout_lines[0] }}";
      };
    dest: '{{ bind_config_dir }}/rndc.key'
    owner: root
    group: root
    mode: u=rw,g=r,o=

- name: Listen on IPv4
  ansible.builtin.lineinfile:
    path: '{{ bind_options_config_file }}'
    line: '{{ item.value }}'
    search_string: '{{ item.key }}'
    insertafter: 'options {'
  with_dict:
    'listen-on ': '    listen-on port 53 { 127.0.0.1; 192.168.100.1; };'
    'allow-query ': '    allow-query { localhost; 192.168.100.0/24; 10.10.0.0/16; 192.168.1.0/24; };'
    'allow-recursion ': '    allow-recursion { localhost; 192.168.100.0/24; };'
    'allow-update ': '    allow-update { localhost; };'

- name: Create or update the zone files
  ansible.builtin.include_tasks: 'zone.yml'
  loop: '{{ bind_zones }}'
  loop_control:
    loop_var: 'zone'

- name: Build the master zone include file
  ansible.builtin.template:
    dest: '{{ bind_config_dir }}/{{ bind_zones_config_file }}'
    src: local.conf.j2
    owner: root
    group: root
    mode: u=rw,g=rw,o=r

- name: Make sure the activation file is included
  ansible.builtin.lineinfile:
    path: '{{ bind_options_config_file }}'
    line: '{{ item.value }}'
    search_string: '{{ item.key }}'
  with_dict:
    '{{ bind_zones_config_file }}': 'include "{{ bind_config_dir }}/{{ bind_zones_config_file }}";'

- name: Restart the DNS Server
  ansible.builtin.service:
    name: named
    enabled: true
    state: restarted

# - name: Try to sync all temporary updates to the zone files
#   ansible.builtin.raw: rndc sync -clean
#   changed_when: true

# - name: Try to reload all zones
#   ansible.builtin.raw: rndc reload
#   changed_when: true
